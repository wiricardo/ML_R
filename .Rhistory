library(tidymodels)
library(tidyverse)
library(rio)
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(rio)
import('Mall_Customers_Enhanced.csv')
data <- import('Mall_Customers_Enhanced.csv')
View(data)
library(dyplr)
library(dplyr)
data(head)
head(data)
head(data)
data |> sumary
data |> sumarise
sumary(data)
summary(data)
data |> select(`Credit Score`) |>
filter(is.na(`Credit Score`))
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
summarise()
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
summarise("Credit Score" = mean(`Credit Score`),
"Annual Income" = mean(`Annual Income (k$)`),
"Estimated Savings (k$)" = mean(`Estimated Savings (k$)`),
"Preferred Category" = mean(`Preferred Category`))
library(naniar)
data |> vis_miss()
# se podria omite "preferred category" porque es una variable categorica
data |> select(`Credit Score`, `Annual Income (k$)`, `Estimated Savings (k$)`) |>
summarise("Credit Score" = mean(`Credit Score`),
"Annual Income" = mean(`Annual Income (k$)`),
"Estimated Savings (k$)" = mean(`Estimated Savings (k$)`),
"Preferred Category" = mean(`Preferred Category`))
# se podria omite "preferred category" porque es una variable categorica
data |> select(`Credit Score`, `Annual Income (k$)`, `Estimated Savings (k$)`) |>
summarise("Credit Score" = mean(`Credit Score`),
"Annual Income" = mean(`Annual Income (k$)`),
"Estimated Savings (k$)" = mean(`Estimated Savings (k$)`))
est_vars <- data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico')
est_vars
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
testing_data <- testing(ds_split)
testing_data <- testing(ds_split)
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
training_data
testing_data
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
receta_1
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
set.seed(3500)
data <- import('Mall_Customers_Enhanced.csv')
head(data)
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> vis_miss()
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
receta_1
reg_li <- linear_reg() |>
set_engine("lm")
folds <- vfold_cv(training_data, v= 4)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_3<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
cv_flujo_1 |> collect_metrics()
cv_flujo_2 |> collect_metrics()
cv_flujo_3 |> collect_metrics()
tidy(flujo_1)
tidy(cv_flujo_1)
View(flujo_3)
modelo_1 <- flujo_1 |> fit(data = training_data)
modelo_2 <- flujo_2 |> fit(data = training_data)
modelo_3 <- flujo_3 |> fit(data = training_data)
tidy(modelo_1)
tidy(modelo_2)
tidy(modelo_3)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = data$`Credit Score`)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_test
library(yardstick)
rmse(m1_test,
truth = valor_real,
estimate = .pred)
rmse(m1_test,
truth = valor_real,
estimate = .pred)
rsq(m1_test,
truth = valor_real,
estimate = .pred)
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_test
rmse(m2_test,
truth = valor_real,
estimate = .pred)
rsq(m2_test,
truth = valor_real,
estimate = .pred)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_metrics
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_metrics <- bind_rows(rmse(m2_test,
truth = valor_real,
estimate = .pred),
rsq(m2_test,
truth = valor_real,
estimate = .pred))
m2_metrics
m3_test <- modelo_3 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m3_metrics <- bind_rows(rmse(m3_test,
truth = valor_real,
estimate = .pred),
rsq(m3_test,
truth = valor_real,
estimate = .pred))
m3_metrics
m1_cv <- cv_flujo_1 |> collect_metrics()
m2_cv <- cv_flujo_2 |> collect_metrics()
m3_cv <- cv_flujo_3 |> collect_metrics()
m1_cv <- cv_flujo_1 |> collect_metrics()
m1_cv
m2_cv <- cv_flujo_2 |> collect_metrics()
m2_cv
m3_cv <- cv_flujo_3 |> collect_metrics()
m3_cv
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +  # línea 1:1
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
xlim(0,10)+ ylim(0,10)+
theme_minimal()
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +  # línea 1:1
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
xlim(0,10)+ ylim(0,10)+
theme_minimal()
m1_plot
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +  # línea 1:1
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m1_plot
m2_plot <- m2_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +  # línea 1:1
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
m3_plot <- m3_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
library(GGally)
install.packages('GGally')
library(GGally)
library(GGally)
library(GGally)
install.packages("ggplot2")
install.packages("ggplot2")
library(GGally)
ggpairs(training_data)
modelo_rf <- rand_forest(trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
library(yardstick)
modelo_rf <- rand_forest(trees = 500, mtry = tune(), min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
modelo_rf <- rand_forest(trees = 500, mtry = 5, min_n = 10) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
install.packages("ranger")
modelo_rf <- rand_forest(trees = 500, mtry = 5, min_n = 10) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
collect_metrics(cv_rf)
fit_rf <- fit(flujo_rf, data = training_data)
rf_test <- augment(fit_rf, new_data = testing_data)
metric_set(rmse, rsq)(rf_test, truth = valor_real, estimate = .pred)
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
library(yardstick)
set.seed(3500)
data <- import('Mall_Customers_Enhanced.csv')
head(data)
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> vis_miss()
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
reg_li <- linear_reg() |>
set_engine("lm")
folds <- vfold_cv(training_data, v= 4)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_3<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
m1_cv <- cv_flujo_1 |> collect_metrics()
m1_cv
m2_cv <- cv_flujo_2 |> collect_metrics()
m2_cv
m3_cv <- cv_flujo_3 |> collect_metrics()
m3_cv
modelo_1 <- flujo_1 |> fit(data = training_data)
modelo_2 <- flujo_2 |> fit(data = training_data)
modelo_3 <- flujo_3 |> fit(data = training_data)
tidy(modelo_1)
tidy(modelo_2)
tidy(modelo_3)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_metrics
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m1_plot
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_metrics <- bind_rows(rmse(m2_test,
truth = valor_real,
estimate = .pred),
rsq(m2_test,
truth = valor_real,
estimate = .pred))
m2_metrics
m2_plot <- m2_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
m3_test <- modelo_3 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m3_metrics <- bind_rows(rmse(m3_test,
truth = valor_real,
estimate = .pred),
rsq(m3_test,
truth = valor_real,
estimate = .pred))
m3_metrics
m3_plot <- m3_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
modelo_rf <- rand_forest(trees = 500, mtry = 5, min_n = 10) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
collect_metrics(cv_rf)
fit_rf <- fit(flujo_rf, data = training_data)
rf_test <- augment(fit_rf, new_data = testing_data)
metric_set(rmse, rsq)(rf_test, truth = valor_real, estimate = .pred)
fit_rf <- fit(flujo_rf, data = training_data)
rf_test <- augment(fit_rf, new_data = testing_data)
metric_set(rmse, rsq)(rf_test, truth = `Credit Score`, estimate = .pred)
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
coord_equal() +
labs(
title = "Random Forest: Valores reales vs predichos",
subtitle = "Línea negra = predicción perfecta (1:1)",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal(base_size = 13)
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
coord_equal() +
labs(
title = "Random Forest: Valores reales vs predichos",
subtitle = "Línea negra = predicción perfecta (1:1)",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
coord_equal() +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
coord_equal() +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
coord_equal() +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
rf_plot <- ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
rf_plot
