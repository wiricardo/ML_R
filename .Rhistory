library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
library(yardstick)
library(reshape2)
set.seed(3500)
data <- import('Mall_Customers_Enhanced.csv')
head(data)
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> vis_miss()
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
reg_li <- linear_reg() |>
set_engine("lm")
folds <- vfold_cv(training_data, v= 4)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_3<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
m1_cv <- cv_flujo_1 |> collect_metrics()
m1_cv
m2_cv <- cv_flujo_2 |> collect_metrics()
m2_cv
m3_cv <- cv_flujo_3 |> collect_metrics()
m3_cv
modelo_1 <- flujo_1 |> fit(data = training_data)
modelo_2 <- flujo_2 |> fit(data = training_data)
modelo_3 <- flujo_3 |> fit(data = training_data)
tidy(modelo_1)
tidy(modelo_2)
tidy(modelo_3)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_metrics
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m1_plot
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_metrics <- bind_rows(rmse(m2_test,
truth = valor_real,
estimate = .pred),
rsq(m2_test,
truth = valor_real,
estimate = .pred))
m2_metrics
m2_plot <- m2_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
m3_test <- modelo_3 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m3_metrics <- bind_rows(rmse(m3_test,
truth = valor_real,
estimate = .pred),
rsq(m3_test,
truth = valor_real,
estimate = .pred))
m3_metrics
m3_plot <- m3_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
cor_mat <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
cor() |> round(2)
melted_cormat <- melt(cor_mat)
head(melted_cormat)
cor_mat_plot <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
cor_mat_plot
lin_data <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`)
lin_plot <- ggpairs(lin_data)
library(ggpairs)
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
library(yardstick)
library(reshape2)
library(GGally)
set.seed(3500)
data <- import('Mall_Customers_Enhanced.csv')
head(data)
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> vis_miss()
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
reg_li <- linear_reg() |>
set_engine("lm")
folds <- vfold_cv(training_data, v= 4)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_3<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
m1_cv <- cv_flujo_1 |> collect_metrics()
m1_cv
m2_cv <- cv_flujo_2 |> collect_metrics()
m2_cv
m3_cv <- cv_flujo_3 |> collect_metrics()
m3_cv
modelo_1 <- flujo_1 |> fit(data = training_data)
modelo_2 <- flujo_2 |> fit(data = training_data)
modelo_3 <- flujo_3 |> fit(data = training_data)
tidy(modelo_1)
tidy(modelo_2)
tidy(modelo_3)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_metrics
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m1_plot
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_metrics <- bind_rows(rmse(m2_test,
truth = valor_real,
estimate = .pred),
rsq(m2_test,
truth = valor_real,
estimate = .pred))
m2_metrics
m2_plot <- m2_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
m3_test <- modelo_3 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m3_metrics <- bind_rows(rmse(m3_test,
truth = valor_real,
estimate = .pred),
rsq(m3_test,
truth = valor_real,
estimate = .pred))
m3_metrics
m3_plot <- m3_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
cor_mat <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
cor() |> round(2)
melted_cormat <- melt(cor_mat)
head(melted_cormat)
cor_mat_plot <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
cor_mat_plot
lin_data <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`)
lin_plot <- ggpairs(lin_data)
lin_plot
modelo_rf <- rand_forest(trees = 500, mtry = 5, min_n = 10) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
collect_metrics(cv_rf)
fit_rf <- fit(flujo_rf, data = training_data)
rf_test <- augment(fit_rf, new_data = testing_data)
rf_metrics <- metric_set(rmse, rsq)(rf_test, truth = `Credit Score`, estimate = .pred)
rf_metrics
rf_plot <- ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
rf_plot
saveRDS(m1_plot, file = "m1_plot.rds")
saveRDS(m2_plot, file = "m2_plot.rds")
saveRDS(m3_plot, file = "m3_plot.rds")
saveRDS(rf_plot, file = "rf_plot.rds")
saveRDS(m1_metrics, file = "m1_metrics.rds")
saveRDS(m2_metrics, file = "m2_metrics.rds")
saveRDS(m3_metrics, file = "m3_metrics.rds")
saveRDS(rf_metrics, file = "rf_metrics.rds")
View(m3_test)
View(m2_metrics)
View(training_data)
View(testing_data)
View(receta_3)
modelo_rf %>%
extract_fit_engine() %>%
pluck("mtry")
modelo_rf %>%
extract_fit_engine() %>%
.$mtry
cv_rf %>%
extract_fit_engine() %>%
.$mtry
cv_rf %>%
extract_fit_engine(1) %>%  # Extrae el primer fold
.$mtry
fit_rf %>%
extract_fit_engine(1) %>%  # Extrae el primer fold
.$mtry
flujo_rf %>%
extract_spec_parsnip()
fit_rf |>
extract_fit_engine() %>%
.$mtry
receta_3 %>%
prep() %>%
bake(new_data = NULL) %>%
glimpse()
receta_3 %>%
prep() %>%
bake(new_data = NULL) %>%
select(-all_outcomes()) %>%  # Quita la variable Y
names()
receta_3 %>%
prep() %>%
bake(new_data = NULL) %>%
select(-all_outcomes()) %>%  # Quita la Y
names()
training_data %>% names()
summary(prep(receta_3))
#| message: false
#| warning: false
library(tidymodels)
library(tidyverse)
library(dplyr)
library(rio)
library(naniar)
library(yardstick)
library(reshape2)
library(GGally)
set.seed(3500)
data <- import('Mall_Customers_Enhanced.csv')
head(data)
str(data)
data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
filter(is.na(`Credit Score`))
data |> filter(is.na(`Credit Score`))
data |> vis_miss()
est_vars <- summary(data |> select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
as_tibble(rownames = 'Estadístico'))
est_vars
ds_split <- initial_split(data)
training_data <- training(ds_split)
testing_data <- testing(ds_split)
receta_1 <- recipe(`Credit Score` ~ `Annual Income (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`)
receta_2 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`)
receta_3 <- recipe(`Credit Score` ~ `Annual Income (k$)` + `Estimated Savings (k$)` + `Preferred Category`, data = training_data) |>
step_normalize(`Annual Income (k$)`, `Estimated Savings (k$)`) |>
step_dummy(`Preferred Category`)
reg_li <- linear_reg() |>
set_engine("lm")
folds <- vfold_cv(training_data, v= 4)
flujo_1<-workflow() |>
add_recipe(receta_1) |>
add_model(reg_li)
flujo_2<-workflow() |>
add_recipe(receta_2) |>
add_model(reg_li)
flujo_3<-workflow() |>
add_recipe(receta_3) |>
add_model(reg_li)
cv_flujo_1 <- flujo_1 |> fit_resamples(resamples = folds)
cv_flujo_2 <- flujo_2 |> fit_resamples(resamples = folds)
cv_flujo_3 <- flujo_3 |> fit_resamples(resamples = folds)
m1_cv <- cv_flujo_1 |> collect_metrics()
m1_cv
m2_cv <- cv_flujo_2 |> collect_metrics()
m2_cv
m3_cv <- cv_flujo_3 |> collect_metrics()
m3_cv
modelo_1 <- flujo_1 |> fit(data = training_data)
modelo_2 <- flujo_2 |> fit(data = training_data)
modelo_3 <- flujo_3 |> fit(data = training_data)
tidy(modelo_1)
tidy(modelo_2)
tidy(modelo_3)
m1_test <- modelo_1 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m1_metrics <- bind_rows(rmse(m1_test,
truth = valor_real,
estimate = .pred),
rsq(m1_test,
truth = valor_real,
estimate = .pred))
m1_metrics
m1_plot <- m1_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m1_plot
m2_test <- modelo_2 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m2_metrics <- bind_rows(rmse(m2_test,
truth = valor_real,
estimate = .pred),
rsq(m2_test,
truth = valor_real,
estimate = .pred))
m2_metrics
m2_plot <- m2_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
m3_test <- modelo_3 |> predict(testing_data) |> bind_cols(valor_real = testing_data$`Credit Score`)
m3_metrics <- bind_rows(rmse(m3_test,
truth = valor_real,
estimate = .pred),
rsq(m3_test,
truth = valor_real,
estimate = .pred))
m3_metrics
m3_plot <- m3_test |>
ggplot()+
aes(x = valor_real, y = .pred)+
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(
x = "Valor real",
y = "Valor predicho",
title = "Valores reales vs predicciones"
) +
theme_minimal()
m2_plot
cor_mat <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`) |>
cor() |> round(2)
melted_cormat <- melt(cor_mat)
head(melted_cormat)
cor_mat_plot <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
cor_mat_plot
lin_data <- data |>
mutate(`Preferred Category` = as.numeric(as.factor(`Preferred Category`))) |>
select(`Credit Score`, `Annual Income (k$)`, `Preferred Category`, `Estimated Savings (k$)`)
lin_plot <- ggpairs(lin_data)
lin_plot
modelo_rf <- rand_forest(trees = 500, mtry = 5, min_n = 10) |>
set_engine("ranger") |>
set_mode("regression")
flujo_rf <- workflow() |>
add_recipe(receta_3) |>
add_model(modelo_rf)
cv_rf <- fit_resamples(flujo_rf, resamples = folds, metrics = metric_set(rmse, rsq))
collect_metrics(cv_rf)
fit_rf <- fit(flujo_rf, data = training_data)
rf_test <- augment(fit_rf, new_data = testing_data)
rf_metrics <- metric_set(rmse, rsq)(rf_test, truth = `Credit Score`, estimate = .pred)
rf_metrics
rf_plot <- ggplot(rf_test, aes(x = `Credit Score`, y = .pred)) +
geom_point(color = "blue", size = 2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(
title = "Random Forest: Valores reales vs predichos",
x = "Valor real (Credit Score)",
y = "Valor predicho"
) +
theme_minimal()
rf_plot
saveRDS(m1_plot, file = "m1_plot.rds")
saveRDS(m2_plot, file = "m2_plot.rds")
saveRDS(m3_plot, file = "m3_plot.rds")
saveRDS(rf_plot, file = "rf_plot.rds")
saveRDS(m1_metrics, file = "m1_metrics.rds")
saveRDS(m2_metrics, file = "m2_metrics.rds")
saveRDS(m3_metrics, file = "m3_metrics.rds")
saveRDS(rf_metrics, file = "rf_metrics.rds")
